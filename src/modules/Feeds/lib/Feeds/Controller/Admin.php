<?php

/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 */
class Feeds_Controller_Admin extends Zikula_AbstractController
{

    /**
     * the main administration function
     */
    public function main()
    {
        $this->redirect(ModUtil::url('Feeds', 'admin', 'view'));
    }

    /**
     * add new item
     * This is a standard function that is called whenever an administrator
     * wishes to create a new module item
     */
    public function newfeed()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Feeds::Item', '::', ACCESS_ADD), LogUtil::getErrorMsgPermission());

        $categories = CategoryRegistryUtil::getRegisteredModuleCategories('Feeds', 'feeds');

        $this->view->assign('categories', $categories);

        $this->view->assign('enablecategorization', ModUtil::getVar('Feeds', 'enablecategorization'));

        // Return the output that has been generated by this function
        return $this->view->fetch('admin/newfeed.tpl');
    }

    /**
     * This is a standard function that is called with the results of the
     * form supplied by admin/new() to create a new item
     * @param 'feedname' the name of the item to be created
     * @param 'url' the url of the item to be created
     */
    public function create($args)
    {
        $this->checkCsrfToken();

        // Get parameters from whatever input we need
        $feed = FormUtil::getPassedValue('feed', isset($args['feed']) ? $args['feed'] : null, 'POST');

        // Create the feed
        $fid = ModUtil::apiFunc('Feeds', 'admin', 'create', $feed);

        if ($fid) {
            // Success
            LogUtil::registerStatus($this->__('Done! Feed created.'));
        }

        $this->redirect(ModUtil::url('Feeds', 'admin', 'view'));
    }

    /**
     * modify an item
     * This is a standard function that is called whenever an administrator
     * wishes to modify a current module item
     * @param 'fid' the id of the item to be modified
     */
    public function modify($args)
    {
        $fid = FormUtil::getPassedValue('fid', isset($args['fid']) ? $args['fid'] : null, 'GET');
        $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');

        if (!empty($objectid)) {
            $fid = $objectid;
        }

        // get the feeds feed
        $item = ModUtil::apiFunc('Feeds', 'user', 'get', array('fid' => $fid));

        if (!$item) {
            return LogUtil::registerError($this->__('No such Feed found.'), 404);
        }

        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Feeds::Item', "$item[name]::$fid", ACCESS_EDIT), LogUtil::getErrorMsgPermission());

        $categories = CategoryRegistryUtil::getRegisteredModuleCategories('Feeds', 'feeds');

        $this->view->assign('categories', $categories);

        // Assign the item
        $this->view->assign($item);

        $this->view->assign('enablecategorization', ModUtil::getVar('Feeds', 'enablecategorization'));

        // Return the output that has been generated by this function
        return $this->view->fetch('admin/modify.tpl');
    }

    /**
     * This is a standard function that is called with the results of the
     * form supplied by RSS_admin_modify() to update a current item
     * @param 'fid' the id of the item to be updated
     * @param 'feedname' the name of the item to be updated
     * @param 'url' the url of the item to be updated
     */
    public function update($args)
    {
        $feed = FormUtil::getPassedValue('feed', isset($args['feed']) ? $args['feed'] : null, 'POST');
        if (!empty($feed['objectid'])) {
            $feed['fid'] = $feed['objectid'];
        }

        $this->checkCsrfToken();

        // Update the feeds feed
        if (ModUtil::apiFunc('Feeds', 'admin', 'update', $feed)) {
            // Success
            LogUtil::registerStatus($this->__('Done! Feed updated.'));
        }

        $this->redirect(ModUtil::url('Feeds', 'admin', 'view'));
    }

    /**
     * delete item
     * @param 'fid' the id of the item to be deleted
     * @param 'confirmation' confirmation that this item can be deleted
     */
    public function delete($args)
    {
        $fid = FormUtil::getPassedValue('fid', isset($args['fid']) ? $args['fid'] : null, 'REQUEST');
        $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
        $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
        if (!empty($objectid)) {
            $fid = $objectid;
        }

        // Get the feed
        $item = ModUtil::apiFunc('Feeds', 'user', 'get', array('fid' => $fid));

        if (!$item) {
            return LogUtil::registerError($this->__('No such Feed found.'), 404);
        }

        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Feeds::Item', "$item[name]::$fid", ACCESS_DELETE), LogUtil::getErrorMsgPermission());

        // Check for confirmation.
        if (empty($confirmation)) {
            // No confirmation yet
            // assign the item id.
            $this->view->assign('fid', $fid);

            // Return the output that has been generated by this function
            return $this->view->fetch('admin/delete.tpl');
        }

        // If we get here it means that the user has confirmed the action

        $this->checkCsrfToken();

        // Delete the feed
        if (ModUtil::apiFunc('Feeds', 'admin', 'delete', array('fid' => $fid))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Feed deleted.'));
        }

        $this->redirect(ModUtil::url('Feeds', 'admin', 'view'));
    }

    /**
     * view items
     */
    public function view($args)
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Feeds::', "::", ACCESS_EDIT), LogUtil::getErrorMsgPermission());

        $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
        $property = FormUtil::getPassedValue('feeds_property', isset($args['feeds_property']) ? $args['feeds_property'] : null, 'POST');
        $category = FormUtil::getPassedValue("feeds_{$property}_category", isset($args["feeds_{$property}_category"]) ? $args["feeds_{$property}_category"] : null, 'POST');
        $clear = FormUtil::getPassedValue('clear', false, 'POST');
        $purge = FormUtil::getPassedValue('purge', false, 'GET');

        if ($purge) {
            if (ModUtil::apiFunc('Feeds', 'admin', 'purgepermalinks')) {
                LogUtil::registerStatus($this->__('Purging of the pemalinks was successful'));
            } else {
                LogUtil::registerError($this->__('Purging of the pemalinks has failed'));
            }
            return System::redirect(strpos(System::serverGetVar('HTTP_REFERER'), 'purge') ? ModUtil::url('Feeds', 'admin', 'view') : System::serverGetVar('HTTP_REFERER'));
        }
        if ($clear) {
            $property = null;
            $category = null;
        }

        // get module vars for later use
        $modvars = ModUtil::getVar('Feeds');

        if ($modvars['enablecategorization']) {
            // load the category registry util
            $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories('Feeds', 'feeds');
            $properties = array_keys($catregistry);

            // Validate and build the category filter - mateo
            if (!empty($property) && in_array($property, $properties) && !empty($category)) {
                $catFilter = array($property => $category);
            }

            // Assign a default property - mateo
            if (empty($property) || !in_array($property, $properties)) {
                $property = $properties[0];
            }

            // plan ahead for ML features
            $propArray = array();
            foreach ($properties as $prop) {
                $propArray[$prop] = $prop;
            }
        }

        // Get all the feeds
        $items = ModUtil::apiFunc('Feeds', 'user', 'getall', array('startnum' => $startnum,
                    'numitems' => $modvars['feedsperpage'],
                    'order' => 'fid',
                    'category' => isset($catFilter) ? $catFilter : null,
                    'catregistry' => isset($catregistry) ? $catregistry : null));

        $feedsitems = array();
        foreach ($items as $item) {
            if (SecurityUtil::checkPermission('Feeds::', "$item[name]::$item[fid]", ACCESS_READ)) {
                // Options for the item
                $options = array();

                if (SecurityUtil::checkPermission('Feeds::', "$item[name]::$item[fid]", ACCESS_EDIT)) {
                    $options[] = array('url' => ModUtil::url('Feeds', 'admin', 'modify', array('fid' => $item['fid'])),
                        'image' => 'xedit.png',
                        'title' => $this->__('Edit'));

                    if (SecurityUtil::checkPermission('Feeds::', "$item[name]::$item[fid]", ACCESS_DELETE)) {
                        $options[] = array('url' => ModUtil::url('Feeds', 'admin', 'delete', array('fid' => $item['fid'])),
                            'image' => '14_layer_deletelayer.png',
                            'title' => $this->__('Delete'));
                    }
                }
                $item['options'] = $options;
                $feedsitems[] = $item;
            }
        }

        // Assign the items and modvars to the template
        $this->view->assign('feedsitems', $feedsitems);
        $this->view->assign($modvars);

        // Assign the default language
        $this->view->assign('lang', ZLanguage::getLanguageCode());

        // Assign the categories information if enabled
        if ($modvars['enablecategorization']) {
            $this->view->assign('catregistry', $catregistry);
            $this->view->assign('numproperties', count($propArray));
            $this->view->assign('properties', $propArray);
            $this->view->assign('property', $property);
            $this->view->assign("category", $category);
        }

        // Assign the values for the smarty plugin to produce a pager
        $this->view->assign('pager', array('numitems' => ModUtil::apiFunc('Feeds', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
            'itemsperpage' => $modvars['feedsperpage']));

        // Return the output that has been generated by this function
        return $this->view->fetch('admin/view.tpl');
    }

    /**
     * This is a standard function to modify the configuration parameters of the
     * module
     */
    public function modifyconfig()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Feeds::', "::", ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        return $this->view
                ->assign('tempdir', System::getVar('temp'))
                ->fetch('admin/modifyconfig.tpl');
    }

    /**
     * This is a standard function to update the configuration parameters of the
     * module given the information passed back by the modification form
     */
    public function updateconfig()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('Feeds::', "::", ACCESS_ADMIN), LogUtil::getErrorMsgPermission());

        $this->checkCsrfToken();

        // update module variables
        $enablecategorization = (bool)FormUtil::getPassedValue('enablecategorization', false, 'POST');
        $this->setVar('enablecategorization', $enablecategorization);

        $bold = (bool)FormUtil::getPassedValue('bold', 0, 'POST');
        $this->setVar('bold', $bold);

        $openinnewwindow = (bool)FormUtil::getPassedValue('openinnewwindow', 0, 'POST');
        $this->setVar('openinnewwindow', $openinnewwindow);

        $feedsperpage = (int)FormUtil::getPassedValue('feedsperpage', 10, 'POST');
        $this->setVar('feedsperpage', $feedsperpage);

        $multifeedlimit = (int)FormUtil::getPassedValue('multifeedlimit', 0, 'POST');
        $this->setVar('multifeedlimit', $multifeedlimit);

        $cacheinterval = (int)FormUtil::getPassedValue('cacheinterval', 3600, 'POST');
        $this->setVar('cacheinterval', $cacheinterval);

        $cachedirectory = (string)FormUtil::getPassedValue('cachedirectory', 'feeds', 'POST');
        $this->setVar('cachedirectory', $cachedirectory);

        $usingcronjob = (string)FormUtil::getPassedValue('usingcronjob', 'feeds', 'POST');
        $this->setVar('usingcronjob', $usingcronjob);

        // make sure a key has been generated
        if (!ModUtil::hasVar('Feeds', 'key')) {
            $this->setVar('key', md5(time()));
        }

        // the module configuration has been updated successfuly
        LogUtil::registerStatus($this->__('Done! Module configuration updated.'));

        $this->redirect(ModUtil::url('Feeds', 'admin', 'view'));
    }

    public function postInitialize()
    {
        $this->view->setCaching(false);
    }

}