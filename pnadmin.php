<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: pnadmin.php 402 2010-01-05 07:25:40Z herr.vorragend $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage Feeds
 */

/**
 * the main administration function
 */
function Feeds_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission('Feeds::Item', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $render = & pnRender::getInstance('Feeds', false);

    // Return the output that has been generated by this function
    return $render->fetch('feeds_admin_main.htm');
}

/**
 * add new item
 * This is a standard function that is called whenever an administrator
 * wishes to create a new module item
 */
function Feeds_admin_new()
{
    // Security check
    if (!SecurityUtil::checkPermission('Feeds::Item', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // load the categories system
    if (!Loader::loadClass('CategoryRegistryUtil')) {
        pn_exit(__f('Error! Unable to load class [%s]', 'CategoryRegistryUtil'));
    }
    $categories = CategoryRegistryUtil::getRegisteredModuleCategories('Feeds', 'feeds');

    // Create output object
    $render = & pnRender::getInstance('Feeds', false);

    $render->assign('categories', $categories);

    $render->assign('enablecategorization', pnModGetVar('Feeds', 'enablecategorization'));

    // Return the output that has been generated by this function
    return $render->fetch('feeds_admin_new.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by feeds_admin_new() to create a new item
 * @param 'feedname' the name of the item to be created
 * @param 'url' the url of the item to be created
 */
function Feeds_admin_create($args)
{
    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError(pnModURL('Feeds', 'admin', 'view'));
    }

    // Get parameters from whatever input we need
    $feed = FormUtil::getPassedValue('feed', isset($args['feed']) ? $args['feed'] : null, 'POST');

    // Notable by its absence there is no security check here.
    $dom = ZLanguage::getModuleDomain('Feeds');

    // Create the feed
    $fid = pnModAPIFunc('Feeds', 'admin', 'create', $feed);

    if ($fid) {
        // Success
        LogUtil::registerStatus(__('Done! Feed created.', $dom));
    }

    return pnRedirect(pnModURL('Feeds', 'admin', 'view'));
}

/**
 * modify an item
 * This is a standard function that is called whenever an administrator
 * wishes to modify a current module item
 * @param 'fid' the id of the item to be modified
 */
function Feeds_admin_modify($args)
{
    $fid = FormUtil::getPassedValue('fid', isset($args['fid']) ? $args['fid'] : null, 'GET');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');

    if (!empty($objectid)) {
        $fid = $objectid;
    }

    $dom = ZLanguage::getModuleDomain('Feeds');

    // get the feeds feed
    $item = pnModAPIFunc('Feeds', 'user', 'get', array('fid' => $fid));

    if (!$item) {
        return LogUtil::registerError(__('No such Feed found.', $dom), 404);
    }

    // security check
    if (!SecurityUtil::checkPermission('Feeds::Item', "$item[name]::$fid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // load the categories system
    if (!Loader::loadClass('CategoryRegistryUtil')) {
        pn_exit(__f('Error! Unable to load class [%s]', 'CategoryRegistryUtil'));
    }
    $categories = CategoryRegistryUtil::getRegisteredModuleCategories('Feeds', 'feeds');

    // Create output object
    $render = & pnRender::getInstance('Feeds', false);

    $render->assign('categories', $categories);

    // Assign the item
    $render->assign($item);

    $render->assign('enablecategorization', pnModGetVar('Feeds', 'enablecategorization'));

    // Return the output that has been generated by this function
    return $render->fetch('feeds_admin_modify.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by RSS_admin_modify() to update a current item
 * @param 'fid' the id of the item to be updated
 * @param 'feedname' the name of the item to be updated
 * @param 'url' the url of the item to be updated
 */
function Feeds_admin_update($args)
{
    $feed = FormUtil::getPassedValue('feed', isset($args['feed']) ? $args['feed'] : null, 'POST');
    if (!empty($feed['objectid'])) {
        $feed['fid'] = $feed['objectid'];
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError(pnModURL('Feeds', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here
    $dom = ZLanguage::getModuleDomain('Feeds');

    // Update the feeds feed
    if (pnModAPIFunc('Feeds', 'admin', 'update', $feed)) {
        // Success
        LogUtil::registerStatus(__('Done! Feed updated.', $dom));
    }

    return pnRedirect(pnModURL('Feeds', 'admin', 'view'));
}

/**
 * delete item
 * @param 'fid' the id of the item to be deleted
 * @param 'confirmation' confirmation that this item can be deleted
 */
function Feeds_admin_delete($args)
{
    $fid = FormUtil::getPassedValue('fid', isset($args['fid']) ? $args['fid'] : null, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $fid = $objectid;
    }

    $dom = ZLanguage::getModuleDomain('Feeds');

    // Get the feed
    $item = pnModAPIFunc('Feeds', 'user', 'get', array('fid' => $fid));

    if (!$item) {
        return LogUtil::registerError(__('No such Feed found.', $dom), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission('Feeds::Item', "$item[name]::$fid", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet

        // Create output object
        $render = & pnRender::getInstance('Feeds', false);

        // assign the item id.
        $render->assign('fid', $fid);

        // Return the output that has been generated by this function
        return $render->fetch('feeds_admin_delete.htm');
    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError(pnModURL('Feeds', 'admin', 'view'));
    }

    // Delete the feed
    if (pnModAPIFunc('Feeds', 'admin', 'delete',
                     array('fid' => $fid))) {
        // Success
        LogUtil::registerStatus(__('Done! Feed deleted.', $dom));
    }

    return pnRedirect(pnModURL('Feeds', 'admin', 'view'));
}

/**
 * view items
 */
function Feeds_admin_view($args)
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Feeds::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    $dom = ZLanguage::getModuleDomain('Feeds');

    $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
    $property = FormUtil::getPassedValue('feeds_property', isset($args['feeds_property']) ? $args['feeds_property'] : null, 'POST');
    $category = FormUtil::getPassedValue("feeds_{$property}_category", isset($args["feeds_{$property}_category"]) ? $args["feeds_{$property}_category"] : null, 'POST');
    $clear    = FormUtil::getPassedValue('clear', false, 'POST');
    $purge    = FormUtil::getPassedValue('purge', false, 'GET');

    if ($purge) {
        if (pnModAPIFunc('Feeds', 'admin', 'purgepermalinks')) {
            LogUtil::registerStatus(__('Purging of the pemalinks was successful', $dom));
        } else {
            LogUtil::registerError(__('Purging of the pemalinks has failed', $dom));
        }
        return pnRedirect(strpos(pnServerGetVar('HTTP_REFERER'), 'purge') ? pnModURL('Feeds', 'admin', 'view') : pnServerGetVar('HTTP_REFERER'));
    }
    if ($clear) {
        $property = null;
        $category = null;
    }

    // get module vars for later use
    $modvars = pnModGetVar('Feeds');

    if ($modvars['enablecategorization'])
    {
        // load the category registry util
        if (!Loader::loadClass('CategoryRegistryUtil')) {
            pn_exit(__f('Error! Unable to load class [%s]', 'CategoryRegistryUtil'));
        }
        $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('Feeds', 'feeds');
        $properties = array_keys($catregistry);

        // Validate and build the category filter - mateo
        if (!empty($property) && in_array($property, $properties) && !empty($category)) {
            $catFilter = array($property => $category);
        }

        // Assign a default property - mateo
        if (empty($property) || !in_array($property, $properties)) {
            $property = $properties[0];
        }

        // plan ahead for ML features
        $propArray = array();
        foreach ($properties as $prop) {
            $propArray[$prop] = $prop;
        }
    }

    // Get all the feeds
    $items = pnModAPIFunc('Feeds', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => $modvars['feedsperpage'],
                                'order'    => 'fid',
                                'category' => isset($catFilter) ? $catFilter : null,
                                'catregistry'  => isset($catregistry) ? $catregistry : null));

    $feedsitems = array();
    foreach ($items as $item)
    {
        if (SecurityUtil::checkPermission('Feeds::', "$item[name]::$item[fid]", ACCESS_READ)) {
            // Options for the item
            $options = array();

            if (SecurityUtil::checkPermission( 'Feeds::', "$item[name]::$item[fid]", ACCESS_EDIT)) {
                $options[] = array('url' => pnModURL('Feeds', 'admin', 'modify', array('fid' => $item['fid'])),
                                   'image' => 'xedit.gif',
                                   'title' => __('Edit', $dom));

                if (SecurityUtil::checkPermission( 'Feeds::', "$item[name]::$item[fid]", ACCESS_DELETE)) {
                    $options[] = array('url' => pnModURL('Feeds', 'admin', 'delete', array('fid' => $item['fid'])),
                                       'image' => '14_layer_deletelayer.gif',
                                       'title' => __('Delete', $dom));
                }
            }
            $item['options'] = $options;
            $feedsitems[] = $item;
        }
    }

    // Create output object
    $render = & pnRender::getInstance('Feeds', false);

    // Assign the items and modvars to the template
    $render->assign('feedsitems', $feedsitems);
    $render->assign($modvars);

    // Assign the default language
    $render->assign('lang', ZLanguage::getLanguageCode());

    // Assign the categories information if enabled
    if ($modvars['enablecategorization']) {
        $render->assign('catregistry', $catregistry);
        $render->assign('numproperties', count($propArray));
        $render->assign('properties', $propArray);
        $render->assign('property', $property);
        $render->assign("category", $category);
    }

    // Assign the values for the smarty plugin to produce a pager
    $render->assign('pager', array('numitems' => pnModAPIFunc('Feeds', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                                     'itemsperpage' => $modvars['feedsperpage']));

    // Return the output that has been generated by this function
    return $render->fetch('feeds_admin_view.htm');
}

/**
 * This is a standard function to modify the configuration parameters of the
 * module
 */
function Feeds_admin_modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('Feeds::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $render = & pnRender::getInstance('Feeds', false);

    // Assign all module vars
    $render->assign(pnModGetVar('Feeds'));

    // Return the output that has been generated by this function
    return $render->fetch('feeds_admin_modifyconfig.htm');
}

/**
 * This is a standard function to update the configuration parameters of the
 * module given the information passed back by the modification form
 */
function Feeds_admin_updateconfig()
{
    // security check
    if (!SecurityUtil::checkPermission('Feeds::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError(pnModURL('Feeds', 'admin', 'view'));
    }

    $dom = ZLanguage::getModuleDomain('Feeds');

    // update module variables
    $enablecategorization = (bool)FormUtil::getPassedValue('enablecategorization', false, 'POST');
    pnModSetVar('Feeds', 'enablecategorization', $enablecategorization);

    $bold = (bool)FormUtil::getPassedValue('bold', 0, 'POST');
    pnModSetVar('Feeds', 'bold', $bold);

    $openinnewwindow = (bool)FormUtil::getPassedValue('openinnewwindow', 0, 'POST');
    pnModSetVar('Feeds', 'openinnewwindow', $openinnewwindow);

    $feedsperpage = (int)FormUtil::getPassedValue('feedsperpage', 10, 'POST');
    pnModSetVar('Feeds', 'feedsperpage', $feedsperpage);

    $multifeedlimit = (int)FormUtil::getPassedValue('multifeedlimit', 0, 'POST');
    pnModSetVar('Feeds', 'multifeedlimit', $multifeedlimit);

    $cacheinterval = (int)FormUtil::getPassedValue('cacheinterval', 3600, 'POST');
    pnModSetVar('Feeds', 'cacheinterval', $cacheinterval);

    $cachedirectory = (string)FormUtil::getPassedValue('cachedirectory', 'feeds', 'POST');
    pnModSetVar('Feeds', 'cachedirectory', $cachedirectory);

    $usingcronjob = (string)FormUtil::getPassedValue('usingcronjob', 'feeds', 'POST');
    pnModSetVar('Feeds', 'usingcronjob', $usingcronjob);

    // make sure a key has been generated
    if (!pnModVarExists('Feeds','key')){
        pnModSetVar('Feeds', 'key', md5(time()));
    }

    // let any other modules know that the modules configuration has been updated
    pnModCallHooks('module', 'updateconfig', 'Feeds', array('module' => 'Feeds'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus(__('Done! Module configuration updated.', $dom));

    return pnRedirect(pnModURL('Feeds', 'admin', 'view'));
}
